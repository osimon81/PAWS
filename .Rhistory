which(tracks[[body_part]][['y']] > withdrawal_latency_threshold)[[1]] / fps), # withdrawal latency
error = function(e) {skip_to_next <- TRUE})
} else {
tryCatch(combined_dataframe[nrow(combined_dataframe)+1,] <- c(features[[body_part]][['pre.peak']]$max.height,
features[[body_part]][['pre.peak']]$max.x.velocity,
features[[body_part]][['pre.peak']]$max.y.velocity,
features[[body_part]][['pre.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$max.height,
features[[body_part]][['post.peak']]$max.x.velocity,
features[[body_part]][['post.peak']]$max.y.velocity,
features[[body_part]][['post.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$number.of.shakes,
features[[body_part]][['post.peak']]$shaking.duration,
features[[body_part]][['post.peak']]$guarding.duration,
body_part, file_names[i], stim, group,
pain_scores[[body_part]][['pre.peak']],
pain_scores[[body_part]][['post.peak']]),
error = function(e) {skip_to_next <- TRUE})
}
if(skip_to_next) { next }
}
View(combined_dataframe)
withdrawal_latency_threshold = 2
csv_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/paws_csv"
save_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/save_folder,"
p_cutoff = 0.30
manual_scale_factor = NA
filter_chosen = "average"
filter_length = 11
reference_distance = 40
stims = c("cs", "db", "lp", "hp")
body_parts = c("toe", "center", "heel")
reference_points = c("objecta", "objectb")
groups = c("ARM", "MAN")
fps = 2000
window_threshold = 0.5
fixed_baseline = 0
y_threshold = 0.1
shake_threshold = 0.35
savgol_filter_smoothing_multiplier = 3
withdrawal_latency_threshold = 2
expanded_analysis = TRUE
i = 1
start_time <- Sys.time()
headers <- c("pre-max_height", "pre-max_x_velocity", "pre-max_y_velocity", "pre-distance_traveled",
"post-max_height", "post-max_x_velocity", "post-max_y_velocity", "post-distance_traveled",
"post-number_of_shakes", "post-shaking_duration", "post-guarding_duration", "body_part", "file",
"stimulus", "group", "pre-pain_score", "post-pain_score")
combined_dataframe <- data.frame(matrix(ncol=17,nrow=0, dimnames=list(NULL, headers)))
if (expanded_analysis == TRUE) {
# accommodate extra rows for t* and withdrawal latency measurements
headers <- c("pre-max_height", "pre-max_x_velocity", "pre-max_y_velocity", "pre-distance_traveled",
"post-max_height", "post-max_x_velocity", "post-max_y_velocity", "post-distance_traveled",
"post-number_of_shakes", "post-shaking_duration", "post-guarding_duration", "body_part", "file",
"stimulus", "group", "pre-pain_score", "post-pain_score", "tstar", "withdrawal_latency")
combined_dataframe <- data.frame(matrix(ncol=19,nrow=0, dimnames=list(NULL, headers)))
}
params <- set_parameters(fps = fps,
shake.threshold = shake_threshold,
window.threshold = window_threshold,
fixed.baseline = list(y = fixed_baseline,
threshold = y_threshold))
index = 1
file_names <- list.files(csv_directory, pattern="*.csv", recursive = TRUE,
full.names = FALSE)
file_paths <- list.files(csv_directory, pattern="*.csv", recursive = TRUE,
full.names = TRUE)
i = 1
skip_to_next <- FALSE
message("Loading file: ", file_names[i])
stim <- stims[which(str_detect(tolower(substr(file_names[index],1,nchar(file_names[index])-3)), tolower(stims)))]
group_val <- NA
for (group_index in 1:length(groups)) {
int <- grep(paste0("\\", groups[group_index]), file_names[index])
if (length(int) == 1) {
group_val <- group_index
break
}
}
group <- groups[group_val]
if (length(stim) == 0) {
stim = "no_stim_ID"
}
if (length(group) == 0) {
group = "no_group_ID"
}
raw_csv <- read.csv(file_paths[i], comment.char = '#', header = FALSE)
body_parts_in_raw_csv <- as.vector(unlist(raw_csv[2,]))
axes_in_raw_csv <- as.vector(unlist(raw_csv[3,]))
names(raw_csv)[1] <- "index"
for (body_part_index in 1:length(body_parts)) {
start <- match(tolower(body_parts[body_part_index]), tolower(body_parts_in_raw_csv))
names(raw_csv)[start] <- paste0(body_parts[body_part_index], "_x")
names(raw_csv)[start+1] <- paste0(body_parts[body_part_index], "_y")
names(raw_csv)[start+2] <- paste0(body_parts[body_part_index], "_likelihood")
}
if (is.na(manual_scale_factor)) {
for (reference_point_index in 1:length(reference_points)) {
start <- match(reference_points[reference_point_index], body_parts_in_raw_csv)
names(raw_csv)[start] <- paste0(reference_points[reference_point_index], "_x")
names(raw_csv)[start+1] <- paste0(reference_points[reference_point_index], "_y")
names(raw_csv)[start+2] <- paste0(reference_points[reference_point_index], "_likelihood")
}
}
raw_csv <- raw_csv[-c(1:3),]
raw_csv <- as.data.frame(sapply(raw_csv, as.numeric))
frames <- as.numeric(length(raw_csv[,1]))
tracks <- list()
reference <- list()
for (body_part in 1:length(body_parts)) {
tracks <- append(tracks, list(list(x = list(NA), y = list(NA), p = list(NA))))
}
if (is.na(manual_scale_factor)) {
for (reference_point in 1:length(reference_points)) {
reference <- append(reference, list(list(x = list(NA), y = list(NA), p = list(NA))))
}
names(reference) <- reference_points
}
names(tracks) <- body_parts
for (body_part in body_parts) {
tracks[[body_part]][[1]] <- raw_csv[[paste0(body_part, "_x")]]
tracks[[body_part]][[2]] <- raw_csv[[paste0(body_part, "_y")]]
tracks[[body_part]][[3]] <- raw_csv[[paste0(body_part, "_likelihood")]]
}
if (is.na(manual_scale_factor)) {
for (reference_point in reference_points) {
reference[[reference_point]][[1]] <- raw_csv[[paste0(reference_point, "_x")]]
reference[[reference_point]][[2]] <- raw_csv[[paste0(reference_point, "_y")]]
reference[[reference_point]][[3]] <- raw_csv[[paste0(reference_point, "_likelihood")]]
}
}
for (body_part in body_parts) {
tracks[[body_part]][['y']] <- max(na.omit(tracks[[body_part]][['y']])) - tracks[[body_part]][['y']]
}
for (body_part in body_parts) {
x_track <- tracks[[body_part]][['x']]
x_track[which(tracks[[body_part]][['p']] < p_cutoff)] <- NA
tryCatch(tracks[[body_part]][['x']] <- imputeTS::na_interpolation(x_track, option = "linear"),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
y_track <- tracks[[body_part]][['y']]
y_track[which(tracks[[body_part]][['p']] < p_cutoff)] <- NA
tryCatch(tracks[[body_part]][['y']] <- imputeTS::na_interpolation(y_track, option = "linear"),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if (is.na(manual_scale_factor)) {
scale_factor <- reference_distance / sqrt((mean(reference[[1]][['x']]) - mean(reference[[2]][['x']]))^2 +
(mean(reference[[1]][['y']]) - mean(reference[[2]][['y']]))^2)
} else {
scale_factor <- manual_scale_factor
}
message("Applying ", filter_chosen, " filter to time series for body parts...")
for (body_part in body_parts) {
if (tolower(filter_chosen) == "savitzky-golay") {
tracks[[body_part]][['x']] <- savgol(tracks[[body_part]][['x']], fl = filter_length, forder = 3, dorder = 0)
tracks[[body_part]][['x']][1:(filter_length*savgol_filter_smoothing_multiplier)] <- tracks[[body_part]][['x']][(filter_length*savgol_filter_smoothing_multiplier)]
tracks[[body_part]][['x']][(length(tracks[[body_part]][['x']]) - filter_length*savgol_filter_smoothing_multiplier):length(tracks[[body_part]][['x']])] <- tracks[[body_part]][['x']][length(tracks[[body_part]][['x']]) - filter_length*savgol_filter_smoothing_multiplier]
tracks[[body_part]][['y']] <- savgol(tracks[[body_part]][['y']], fl = filter_length, forder = 3, dorder = 0)
tracks[[body_part]][['y']][1:(filter_length*savgol_filter_smoothing_multiplier)] <- tracks[[body_part]][['y']][(filter_length*savgol_filter_smoothing_multiplier)]
tracks[[body_part]][['y']][(length(tracks[[body_part]][['y']]) - filter_length*savgol_filter_smoothing_multiplier):length(tracks[[body_part]][['y']])] <- tracks[[body_part]][['y']][length(tracks[[body_part]][['y']]) - filter_length*savgol_filter_smoothing_multiplier]
} else if (tolower(filter_chosen) == "median") {
tracks[[body_part]][['x']] <- runmed(tracks[[body_part]][['x']], k = filter_length, endrule = "keep")
tracks[[body_part]][['y']] <- runmed(tracks[[body_part]][['y']], k = filter_length, endrule = "keep")
} else if (tolower(filter_chosen) == "average") {
tracks[[body_part]][['x']] <- frollmean(tracks[[body_part]][['x']], n = filter_length, algo = "exact", align = "center")
tracks[[body_part]][['y']] <- frollmean(tracks[[body_part]][['y']], n = filter_length, algo = "exact", align = "center")
} else if (tolower(filter_chosen) == "none") {
message("No filter applied.")
}
}
message("Extracting features and applying mm/px scale factor ", round(scale_factor, 6), "...")
features <- list()
for (body_part in 1:length(body_parts)) {
features <- append(features, list(NA))
}
names(features) <- body_parts
for (body_part in body_parts) {
tryCatch(features[[body_part]] <- extract_features(x = (as.numeric(na.omit(tracks[[body_part]][['x']])) * scale_factor),
y = (as.numeric(na.omit(tracks[[body_part]][['y']])) * scale_factor),
parameters = params),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if(skip_to_next) { next }
message("Assigning pre- and post-peak pain scores to body parts...")
pain_scores <- list()
for (body_part in 1:length(body_parts)) {
pain_scores <- append(pain_scores, list(list(pre.peak = list(NA), post.peak = list(NA))))
}
names(pain_scores) <- body_parts
for (body_part in body_parts) {
tryCatch(pain_scores[[body_part]][['pre.peak']] <- as.numeric(pain_score(paw.features = features[[body_part]],
strains = 'C57B6-',
feature.set = c("pre.peak"),
pain.model = NULL)),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
tryCatch(pain_scores[[body_part]][['post.peak']] <- as.numeric(pain_score(paw.features = features[[body_part]],
strains = 'C57B6-',
feature.set = c("post.peak"),
pain.model = NULL)),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if(skip_to_next) { next }
for (body_part in body_parts) {
if (expanded_analysis) {
tryCatch(combined_dataframe[nrow(combined_dataframe)+1,] <- c(features[[body_part]][['pre.peak']]$max.height,
features[[body_part]][['pre.peak']]$max.x.velocity,
features[[body_part]][['pre.peak']]$max.y.velocity,
features[[body_part]][['pre.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$max.height,
features[[body_part]][['post.peak']]$max.x.velocity,
features[[body_part]][['post.peak']]$max.y.velocity,
features[[body_part]][['post.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$number.of.shakes,
features[[body_part]][['post.peak']]$shaking.duration,
features[[body_part]][['post.peak']]$guarding.duration,
body_part, file_names[i], stim, group,
pain_scores[[body_part]][['pre.peak']],
pain_scores[[body_part]][['post.peak']],
features[[body_part]][['time.series']]$tstar / fps, # t*
which(tracks[[body_part]][['y']] > withdrawal_latency_threshold)[[1]] / fps), # withdrawal latency
error = function(e) {skip_to_next <- TRUE})
} else {
tryCatch(combined_dataframe[nrow(combined_dataframe)+1,] <- c(features[[body_part]][['pre.peak']]$max.height,
features[[body_part]][['pre.peak']]$max.x.velocity,
features[[body_part]][['pre.peak']]$max.y.velocity,
features[[body_part]][['pre.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$max.height,
features[[body_part]][['post.peak']]$max.x.velocity,
features[[body_part]][['post.peak']]$max.y.velocity,
features[[body_part]][['post.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$number.of.shakes,
features[[body_part]][['post.peak']]$shaking.duration,
features[[body_part]][['post.peak']]$guarding.duration,
body_part, file_names[i], stim, group,
pain_scores[[body_part]][['pre.peak']],
pain_scores[[body_part]][['post.peak']]),
error = function(e) {skip_to_next <- TRUE})
}
if(skip_to_next) { next }
}
View(combined_dataframe)
paws_dashboard()
csv_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/paws_csv"
save_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/save_folder,"
p_cutoff = 0.30
manual_scale_factor = NA
filter_chosen = "average"
filter_length = 11
reference_distance = 40
stims = c("cs", "db", "lp", "hp")
body_parts = c("toe", "center", "heel")
reference_points = c("objecta", "objectb")
groups = c("ARM", "MAN")
fps = 2000
window_threshold = 0.5
fixed_baseline = 0
y_threshold = 0.1
shake_threshold = 0.35
savgol_filter_smoothing_multiplier = 3
withdrawal_latency_threshold = 2.5
expanded_analysis = TRUE
i = 1
csv_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/paws_csv"
save_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/save_folder,"
p_cutoff = 0.30
manual_scale_factor = NA
filter_chosen = "average"
filter_length = 11
reference_distance = 40
stims = c("cs", "db", "lp", "hp")
body_parts = c("toe", "center", "heel")
reference_points = c("objecta", "objectb")
groups = c("ARM", "MAN")
fps = 2000
window_threshold = 0.5
fixed_baseline = 0
y_threshold = 0.1
shake_threshold = 0.35
savgol_filter_smoothing_multiplier = 3
withdrawal_latency_threshold = 2.5
expanded_analysis = TRUE
i = 1
start_time <- Sys.time()
headers <- c("pre-max_height", "pre-max_x_velocity", "pre-max_y_velocity", "pre-distance_traveled",
"post-max_height", "post-max_x_velocity", "post-max_y_velocity", "post-distance_traveled",
"post-number_of_shakes", "post-shaking_duration", "post-guarding_duration", "body_part", "file",
"stimulus", "group", "pre-pain_score", "post-pain_score")
combined_dataframe <- data.frame(matrix(ncol=17,nrow=0, dimnames=list(NULL, headers)))
if (expanded_analysis == TRUE) {
# accommodate extra rows for t* and withdrawal latency measurements
headers <- c("pre-max_height", "pre-max_x_velocity", "pre-max_y_velocity", "pre-distance_traveled",
"post-max_height", "post-max_x_velocity", "post-max_y_velocity", "post-distance_traveled",
"post-number_of_shakes", "post-shaking_duration", "post-guarding_duration", "body_part", "file",
"stimulus", "group", "pre-pain_score", "post-pain_score", "tstar", "withdrawal_latency")
combined_dataframe <- data.frame(matrix(ncol=19,nrow=0, dimnames=list(NULL, headers)))
}
params <- set_parameters(fps = fps,
shake.threshold = shake_threshold,
window.threshold = window_threshold,
fixed.baseline = list(y = fixed_baseline,
threshold = y_threshold))
index = 1
file_names <- list.files(csv_directory, pattern="*.csv", recursive = TRUE,
full.names = FALSE)
file_paths <- list.files(csv_directory, pattern="*.csv", recursive = TRUE,
full.names = TRUE)
skip_to_next <- FALSE
message("Loading file: ", file_names[i])
stim <- stims[which(str_detect(tolower(substr(file_names[index],1,nchar(file_names[index])-3)), tolower(stims)))]
group_val <- NA
for (group_index in 1:length(groups)) {
int <- grep(paste0("\\", groups[group_index]), file_names[index])
if (length(int) == 1) {
group_val <- group_index
break
}
}
group <- groups[group_val]
if (length(stim) == 0) {
stim = "no_stim_ID"
}
if (length(group) == 0) {
group = "no_group_ID"
}
raw_csv <- read.csv(file_paths[i], comment.char = '#', header = FALSE)
body_parts_in_raw_csv <- as.vector(unlist(raw_csv[2,]))
axes_in_raw_csv <- as.vector(unlist(raw_csv[3,]))
names(raw_csv)[1] <- "index"
for (body_part_index in 1:length(body_parts)) {
start <- match(tolower(body_parts[body_part_index]), tolower(body_parts_in_raw_csv))
names(raw_csv)[start] <- paste0(body_parts[body_part_index], "_x")
names(raw_csv)[start+1] <- paste0(body_parts[body_part_index], "_y")
names(raw_csv)[start+2] <- paste0(body_parts[body_part_index], "_likelihood")
}
if (is.na(manual_scale_factor)) {
for (reference_point_index in 1:length(reference_points)) {
start <- match(reference_points[reference_point_index], body_parts_in_raw_csv)
names(raw_csv)[start] <- paste0(reference_points[reference_point_index], "_x")
names(raw_csv)[start+1] <- paste0(reference_points[reference_point_index], "_y")
names(raw_csv)[start+2] <- paste0(reference_points[reference_point_index], "_likelihood")
}
}
raw_csv <- raw_csv[-c(1:3),]
raw_csv <- as.data.frame(sapply(raw_csv, as.numeric))
frames <- as.numeric(length(raw_csv[,1]))
tracks <- list()
reference <- list()
for (body_part in 1:length(body_parts)) {
tracks <- append(tracks, list(list(x = list(NA), y = list(NA), p = list(NA))))
}
if (is.na(manual_scale_factor)) {
for (reference_point in 1:length(reference_points)) {
reference <- append(reference, list(list(x = list(NA), y = list(NA), p = list(NA))))
}
names(reference) <- reference_points
}
names(tracks) <- body_parts
for (body_part in body_parts) {
tracks[[body_part]][[1]] <- raw_csv[[paste0(body_part, "_x")]]
tracks[[body_part]][[2]] <- raw_csv[[paste0(body_part, "_y")]]
tracks[[body_part]][[3]] <- raw_csv[[paste0(body_part, "_likelihood")]]
}
if (is.na(manual_scale_factor)) {
for (reference_point in reference_points) {
reference[[reference_point]][[1]] <- raw_csv[[paste0(reference_point, "_x")]]
reference[[reference_point]][[2]] <- raw_csv[[paste0(reference_point, "_y")]]
reference[[reference_point]][[3]] <- raw_csv[[paste0(reference_point, "_likelihood")]]
}
}
for (body_part in body_parts) {
tracks[[body_part]][['y']] <- max(na.omit(tracks[[body_part]][['y']])) - tracks[[body_part]][['y']]
}
for (body_part in body_parts) {
x_track <- tracks[[body_part]][['x']]
x_track[which(tracks[[body_part]][['p']] < p_cutoff)] <- NA
tryCatch(tracks[[body_part]][['x']] <- imputeTS::na_interpolation(x_track, option = "linear"),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
y_track <- tracks[[body_part]][['y']]
y_track[which(tracks[[body_part]][['p']] < p_cutoff)] <- NA
tryCatch(tracks[[body_part]][['y']] <- imputeTS::na_interpolation(y_track, option = "linear"),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if (is.na(manual_scale_factor)) {
scale_factor <- reference_distance / sqrt((mean(reference[[1]][['x']]) - mean(reference[[2]][['x']]))^2 +
(mean(reference[[1]][['y']]) - mean(reference[[2]][['y']]))^2)
} else {
scale_factor <- manual_scale_factor
}
message("Applying ", filter_chosen, " filter to time series for body parts...")
for (body_part in body_parts) {
if (tolower(filter_chosen) == "savitzky-golay") {
tracks[[body_part]][['x']] <- savgol(tracks[[body_part]][['x']], fl = filter_length, forder = 3, dorder = 0)
tracks[[body_part]][['x']][1:(filter_length*savgol_filter_smoothing_multiplier)] <- tracks[[body_part]][['x']][(filter_length*savgol_filter_smoothing_multiplier)]
tracks[[body_part]][['x']][(length(tracks[[body_part]][['x']]) - filter_length*savgol_filter_smoothing_multiplier):length(tracks[[body_part]][['x']])] <- tracks[[body_part]][['x']][length(tracks[[body_part]][['x']]) - filter_length*savgol_filter_smoothing_multiplier]
tracks[[body_part]][['y']] <- savgol(tracks[[body_part]][['y']], fl = filter_length, forder = 3, dorder = 0)
tracks[[body_part]][['y']][1:(filter_length*savgol_filter_smoothing_multiplier)] <- tracks[[body_part]][['y']][(filter_length*savgol_filter_smoothing_multiplier)]
tracks[[body_part]][['y']][(length(tracks[[body_part]][['y']]) - filter_length*savgol_filter_smoothing_multiplier):length(tracks[[body_part]][['y']])] <- tracks[[body_part]][['y']][length(tracks[[body_part]][['y']]) - filter_length*savgol_filter_smoothing_multiplier]
} else if (tolower(filter_chosen) == "median") {
tracks[[body_part]][['x']] <- runmed(tracks[[body_part]][['x']], k = filter_length, endrule = "keep")
tracks[[body_part]][['y']] <- runmed(tracks[[body_part]][['y']], k = filter_length, endrule = "keep")
} else if (tolower(filter_chosen) == "average") {
tracks[[body_part]][['x']] <- frollmean(tracks[[body_part]][['x']], n = filter_length, algo = "exact", align = "center")
tracks[[body_part]][['y']] <- frollmean(tracks[[body_part]][['y']], n = filter_length, algo = "exact", align = "center")
} else if (tolower(filter_chosen) == "none") {
message("No filter applied.")
}
}
message("Extracting features and applying mm/px scale factor ", round(scale_factor, 6), "...")
features <- list()
for (body_part in 1:length(body_parts)) {
features <- append(features, list(NA))
}
names(features) <- body_parts
for (body_part in body_parts) {
tryCatch(features[[body_part]] <- extract_features(x = (as.numeric(na.omit(tracks[[body_part]][['x']])) * scale_factor),
y = (as.numeric(na.omit(tracks[[body_part]][['y']])) * scale_factor),
parameters = params),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if(skip_to_next) { next }
message("Assigning pre- and post-peak pain scores to body parts...")
pain_scores <- list()
for (body_part in 1:length(body_parts)) {
pain_scores <- append(pain_scores, list(list(pre.peak = list(NA), post.peak = list(NA))))
}
names(pain_scores) <- body_parts
for (body_part in body_parts) {
tryCatch(pain_scores[[body_part]][['pre.peak']] <- as.numeric(pain_score(paw.features = features[[body_part]],
strains = 'C57B6-',
feature.set = c("pre.peak"),
pain.model = NULL)),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
tryCatch(pain_scores[[body_part]][['post.peak']] <- as.numeric(pain_score(paw.features = features[[body_part]],
strains = 'C57B6-',
feature.set = c("post.peak"),
pain.model = NULL)),
error = function(e) { skip_to_next <- TRUE})
if(skip_to_next) { next }
}
if(skip_to_next) { next }
for (body_part in body_parts) {
if (expanded_analysis) {
tryCatch(combined_dataframe[nrow(combined_dataframe)+1,] <- c(features[[body_part]][['pre.peak']]$max.height,
features[[body_part]][['pre.peak']]$max.x.velocity,
features[[body_part]][['pre.peak']]$max.y.velocity,
features[[body_part]][['pre.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$max.height,
features[[body_part]][['post.peak']]$max.x.velocity,
features[[body_part]][['post.peak']]$max.y.velocity,
features[[body_part]][['post.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$number.of.shakes,
features[[body_part]][['post.peak']]$shaking.duration,
features[[body_part]][['post.peak']]$guarding.duration,
body_part, file_names[i], stim, group,
pain_scores[[body_part]][['pre.peak']],
pain_scores[[body_part]][['post.peak']],
features[[body_part]][['time.series']]$tstar / fps, # t*
which(tracks[[body_part]][['y']] > withdrawal_latency_threshold)[[1]] / fps), # withdrawal latency
error = function(e) {skip_to_next <- TRUE})
} else {
tryCatch(combined_dataframe[nrow(combined_dataframe)+1,] <- c(features[[body_part]][['pre.peak']]$max.height,
features[[body_part]][['pre.peak']]$max.x.velocity,
features[[body_part]][['pre.peak']]$max.y.velocity,
features[[body_part]][['pre.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$max.height,
features[[body_part]][['post.peak']]$max.x.velocity,
features[[body_part]][['post.peak']]$max.y.velocity,
features[[body_part]][['post.peak']]$distance.traveled,
features[[body_part]][['post.peak']]$number.of.shakes,
features[[body_part]][['post.peak']]$shaking.duration,
features[[body_part]][['post.peak']]$guarding.duration,
body_part, file_names[i], stim, group,
pain_scores[[body_part]][['pre.peak']],
pain_scores[[body_part]][['post.peak']]),
error = function(e) {skip_to_next <- TRUE})
}
if(skip_to_next) { next }
}
View(combined_dataframe)
paws_dashboard()
plot(tracks$toe$y)
plot(tracks$center$y)
plot(tracks$heel$y)
plot(y = tracks$heel$y, x = 1:length(tracks$heel$y))
plot(y = tracks$heel$y, x = 1:length(tracks$heel$y)/2000)
plot(y = tracks$heel$y, x = 1:length(tracks$heel$y)/fps)
abline(v = 0.1955)
plot(y = tracks$center$y, x = 1:length(tracks$center$y)/fps)
abline(v = 0.038)
plot(y = tracks$toe$y, x = 1:length(tracks$toe$y)/fps)
abline(v = 0.003)
paws_analysis(csv_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/paws_csv",
save_directory = "/Users/Simon/Desktop/Life/Columbia/(y) Research/Abdus-Saboor Lab/r dev folders/save_folder",
groups = c("MAN", "ARM"),
expanded_analysis = TRUE,
withdrawal_latency_threshold = 6,
reference_distance = 40,
fixed_baseline = 0,
y_threshold = 0.1,
stims = c("cs", "db", "lp", "hp"))
git status
roxygen2::roxygenize()
library(pawscore)
pawscore:::jones2020.standards
