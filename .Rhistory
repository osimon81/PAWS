stop("Invalid filter name! (Use 'none', 'savitzky-golay', 'median', or 'average'")
}
}
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "none",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "none",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "none",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "none",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "average",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "savgol",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.5, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv"
manual_scale_factor = NA
p_cutoff = 0.2
filter = "savitzky-golay"
body_part = "center"
reference_distance = 40
fps = 2000
savgol_window_length = 11
savgol_filter_smoothing_multiplier = 3
median_window_length = 11
average_window_length = 11
shake_threshold = 0.35
window_threshold = 0.5
fixed_baseline = 1
y_threshold = 0.1
csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv"
manual_scale_factor = NA
p_cutoff = 0.2
filter = "savitzky-golay"
body_part = "center"
reference_distance = 40
fps = 2000
savgol_window_length = 11
savgol_filter_smoothing_multiplier = 3
median_window_length = 11
average_window_length = 11
shake_threshold = 0.35
window_threshold = 0.5
fixed_baseline = 1
y_threshold = 0.1
params <- set_parameters(fps = fps,
shake.threshold = shake_threshold,
window.threshold = window_threshold,
fixed.baseline = list(y = fixed_baseline,
threshold = y_threshold))
if (is.character(csv_or_path)) {
csv <- read.csv(csv_or_path, header = FALSE)
} else {
csv <- csv_or_path
}
body_parts_in_raw_csv <- as.vector(unlist(csv[2,]))
axes_in_raw_csv <- as.vector(unlist(csv[3,]))
names(csv)[1] <- "scorer"
for(bp in unique(body_parts_in_raw_csv)) {
if (bp != "bodyparts") {
start <- match(tolower(bp), tolower(body_parts_in_raw_csv))
names(csv)[start] <- tolower(paste0(bp, "_x"))
names(csv)[start+1] <- tolower(paste0(bp, "_y"))
names(csv)[start+2] <- tolower(paste0(bp, "_p"))
}
}
csv <- tail(csv, -3)
if (body_part == "toe") {
tracking_y <- csv$toe_y
tracking_x <- csv$toe_x
conf <- as.numeric(csv$toe_p)
} else if (body_part == "center") {
tracking_y <- csv$center_y
tracking_x <- csv$center_x
conf <- as.numeric(csv$center_p)
} else if (body_part == "heel") {
tracking_y <- csv$heel_y
tracking_x <- csv$heel_x
conf <- as.numeric(csv$heel_p)
} else {
stop("invalid body_part! (use toe, center, or heel for body part)")
}
tracking_x <- as.numeric(tracking_x)
tracking_y <- as.numeric(tracking_y)
tracking_x[conf < p_cutoff] <- NA
tracking_x <- imputeTS::na_interpolation(tracking_x, option = "linear")
tracking_y[conf < p_cutoff] <- NA
tracking_y <- imputeTS::na_interpolation(tracking_y, option = "linear")
if (is.na(manual_scale_factor)) {
scale_factor <- reference_distance/sqrt(abs((mean(as.numeric(csv$objecta_x))-mean(as.numeric(csv$objectb_x)))^2)+abs((mean(as.numeric(csv$objecta_y))-mean(as.numeric(csv$objectb_y)))^2))
} else {
scale_factor <- manual_scale_factor
}
col_x <- scale_factor*(as.numeric(tracking_x))
col_y <- scale_factor*(as.numeric(tracking_y))
col_y <- max(col_y) - col_y
col_savgol_x <- pracma::savgol(as.numeric(col_x), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_x[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_x[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_x[(length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_x)] <- col_savgol_x[length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_savgol_y <- pracma::savgol(as.numeric(col_y), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_y[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_y[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_y[(length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_y)] <- col_savgol_y[length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_median_x <- as.numeric(runmed(as.numeric(col_x), k = median_window_length, endrule = c("keep")))
col_median_y <- as.numeric(runmed(as.numeric(col_y), k = median_window_length, endrule = c("keep")))
col_average_x <- data.table::frollmean(as.numeric(col_x), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
col_average_y <- data.table::frollmean(as.numeric(col_y), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
sample_tracking <- data.frame(csv$scorer, col_x, col_y,
col_savgol_x, col_savgol_y,
col_median_x, col_median_y,
col_average_x, col_average_y,
conf)
raw_features <- extract_features(x = sample_tracking$col_x, y = sample_tracking$col_y,
parameters = params, diagnostics = TRUE)
savgol_features <- extract_features(x = sample_tracking$col_savgol_x, y = sample_tracking$col_savgol_y,
parameters = params, diagnostics = TRUE)
median_features <- extract_features(x = sample_tracking$col_median_x, y = sample_tracking$col_median_y,
parameters = params, diagnostics = TRUE)
average_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_average_x)), y = as.numeric(na.omit(sample_tracking$col_average_y)),
parameters = params, diagnostics = TRUE)
plotlist <- list(raw_features,
savgol_features,
median_features,
average_features)
if(tolower(filter) == "none") {
plot(plotlist[[1]])
} else if(tolower(filter) == "savitzky-golay") {
plot(plotlist[[2]])
} else if(tolower(filter) == "median") {
plot(plotlist[[3]])
} else if (tolower(filter) == "average") {
plot(plotlist[[4]])
} else {
stop("Invalid filter name! (Use 'none', 'savitzky-golay', 'median', or 'average'")
}
filter
plot(plotlist[[2]])
plotlist[[2]]
plot(plotlist[[2]])
plot(plotlist[[1]])
plot(raw_features)
View(savgol_features)
plot(raw_features$diagnostics)
plot(raw_features, panel = "kinematics")
plot(raw_features)
raw_features <- extract_features(x = sample_tracking$col_x, y = sample_tracking$col_y,
parameters = params, diagnostics = TRUE)
savgol_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_savgol_x)), y = as.numeric(na.omit(sample_tracking$col_savgol_y)),
parameters = params, diagnostics = TRUE)
median_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_median_x)), y = as.numeric(na.omit(sample_tracking$col_median_y)),
parameters = params, diagnostics = TRUE)
average_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_average_x)), y = as.numeric(na.omit(sample_tracking$col_average_y)),
parameters = params, diagnostics = TRUE)
plotlist <- list(raw_features,
savgol_features,
median_features,
average_features)
if(tolower(filter) == "none") {
plot(plotlist[[1]])
} else if(tolower(filter) == "savitzky-golay") {
plot(plotlist[[2]])
} else if(tolower(filter) == "median") {
plot(plotlist[[3]])
} else if (tolower(filter) == "average") {
plot(plotlist[[4]])
} else {
stop("Invalid filter name! (Use 'none', 'savitzky-golay', 'median', or 'average'")
}
plotlist[[2]]
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
#' @param average_window_length The rolling window length of average filter smoothing to apply
#' to your tracking trajectory.
#' @return A figure with diagnostic panels (indicating unannotated and annotated univariate projections,
#' and estimated horizontal and vertical positions and velocities).
#' @import ggplot2
#' @import pracma
#' @import data.table
#' @import ggpubr
#' @import pawscore
#' @export
plot_univariate_projection <- function(csv_or_path, manual_scale_factor = NA, p_cutoff = 0, filter = "none",
body_part = "center", reference_distance, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1) {
params <- set_parameters(fps = fps,
shake.threshold = shake_threshold,
window.threshold = window_threshold,
fixed.baseline = list(y = fixed_baseline,
threshold = y_threshold))
if (is.character(csv_or_path)) {
csv <- read.csv(csv_or_path, header = FALSE)
} else {
csv <- csv_or_path
}
body_parts_in_raw_csv <- as.vector(unlist(csv[2,]))
axes_in_raw_csv <- as.vector(unlist(csv[3,]))
names(csv)[1] <- "scorer"
for(bp in unique(body_parts_in_raw_csv)) {
if (bp != "bodyparts") {
start <- match(tolower(bp), tolower(body_parts_in_raw_csv))
names(csv)[start] <- tolower(paste0(bp, "_x"))
names(csv)[start+1] <- tolower(paste0(bp, "_y"))
names(csv)[start+2] <- tolower(paste0(bp, "_p"))
}
}
csv <- tail(csv, -3)
if (body_part == "toe") {
tracking_y <- csv$toe_y
tracking_x <- csv$toe_x
conf <- as.numeric(csv$toe_p)
} else if (body_part == "center") {
tracking_y <- csv$center_y
tracking_x <- csv$center_x
conf <- as.numeric(csv$center_p)
} else if (body_part == "heel") {
tracking_y <- csv$heel_y
tracking_x <- csv$heel_x
conf <- as.numeric(csv$heel_p)
} else {
stop("invalid body_part! (use toe, center, or heel for body part)")
}
tracking_x <- as.numeric(tracking_x)
tracking_y <- as.numeric(tracking_y)
tracking_x[conf < p_cutoff] <- NA
tracking_x <- imputeTS::na_interpolation(tracking_x, option = "linear")
tracking_y[conf < p_cutoff] <- NA
tracking_y <- imputeTS::na_interpolation(tracking_y, option = "linear")
if (is.na(manual_scale_factor)) {
scale_factor <- reference_distance/sqrt(abs((mean(as.numeric(csv$objecta_x))-mean(as.numeric(csv$objectb_x)))^2)+abs((mean(as.numeric(csv$objecta_y))-mean(as.numeric(csv$objectb_y)))^2))
} else {
scale_factor <- manual_scale_factor
}
col_x <- scale_factor*(as.numeric(tracking_x))
col_y <- scale_factor*(as.numeric(tracking_y))
col_y <- max(col_y) - col_y
# smoothing filters (savitzky-golay, running median, running average)
col_savgol_x <- pracma::savgol(as.numeric(col_x), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_x[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_x[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_x[(length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_x)] <- col_savgol_x[length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_savgol_y <- pracma::savgol(as.numeric(col_y), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_y[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_y[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_y[(length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_y)] <- col_savgol_y[length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_median_x <- as.numeric(runmed(as.numeric(col_x), k = median_window_length, endrule = c("keep")))
col_median_y <- as.numeric(runmed(as.numeric(col_y), k = median_window_length, endrule = c("keep")))
col_average_x <- data.table::frollmean(as.numeric(col_x), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
col_average_y <- data.table::frollmean(as.numeric(col_y), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
sample_tracking <- data.frame(csv$scorer, col_x, col_y,
col_savgol_x, col_savgol_y,
col_median_x, col_median_y,
col_average_x, col_average_y,
conf)
raw_features <- extract_features(x = sample_tracking$col_x, y = sample_tracking$col_y,
parameters = params, diagnostics = TRUE)
savgol_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_savgol_x)), y = as.numeric(na.omit(sample_tracking$col_savgol_y)),
parameters = params, diagnostics = TRUE)
median_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_median_x)), y = as.numeric(na.omit(sample_tracking$col_median_y)),
parameters = params, diagnostics = TRUE)
average_features <- extract_features(x = as.numeric(na.omit(sample_tracking$col_average_x)), y = as.numeric(na.omit(sample_tracking$col_average_y)),
parameters = params, diagnostics = TRUE)
plotlist <- list(raw_features,
savgol_features,
median_features,
average_features)
if(tolower(filter) == "none") {
plot(plotlist[[1]])
} else if(tolower(filter) == "savitzky-golay") {
plot(plotlist[[2]])
} else if(tolower(filter) == "median") {
plot(plotlist[[3]])
} else if (tolower(filter) == "average") {
plot(plotlist[[4]])
} else {
stop("Invalid filter name! (Use 'none', 'savitzky-golay', 'median', or 'average'")
}
}
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6095_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
params <- set_parameters(fps = fps,
shake.threshold = shake_threshold,
window.threshold = window_threshold,
fixed.baseline = list(y = fixed_baseline,
threshold = y_threshold))
if (is.character(csv_or_path)) {
csv <- read.csv(csv_or_path, header = FALSE)
} else {
csv <- csv_or_path
}
body_parts_in_raw_csv <- as.vector(unlist(csv[2,]))
axes_in_raw_csv <- as.vector(unlist(csv[3,]))
names(csv)[1] <- "scorer"
for(bp in unique(body_parts_in_raw_csv)) {
if (bp != "bodyparts") {
start <- match(tolower(bp), tolower(body_parts_in_raw_csv))
names(csv)[start] <- tolower(paste0(bp, "_x"))
names(csv)[start+1] <- tolower(paste0(bp, "_y"))
names(csv)[start+2] <- tolower(paste0(bp, "_p"))
}
}
csv <- tail(csv, -3)
if (body_part == "toe") {
tracking_y <- csv$toe_y
tracking_x <- csv$toe_x
conf <- as.numeric(csv$toe_p)
} else if (body_part == "center") {
tracking_y <- csv$center_y
tracking_x <- csv$center_x
conf <- as.numeric(csv$center_p)
} else if (body_part == "heel") {
tracking_y <- csv$heel_y
tracking_x <- csv$heel_x
conf <- as.numeric(csv$heel_p)
} else {
stop("invalid body_part! (use toe, center, or heel for body part)")
}
tracking_x <- as.numeric(tracking_x)
tracking_y <- as.numeric(tracking_y)
tracking_x[conf < p_cutoff] <- NA
tracking_x <- imputeTS::na_interpolation(tracking_x, option = "linear")
tracking_y[conf < p_cutoff] <- NA
tracking_y <- imputeTS::na_interpolation(tracking_y, option = "linear")
if (is.na(manual_scale_factor)) {
scale_factor <- reference_distance/sqrt(abs((mean(as.numeric(csv$objecta_x))-mean(as.numeric(csv$objectb_x)))^2)+abs((mean(as.numeric(csv$objecta_y))-mean(as.numeric(csv$objectb_y)))^2))
} else {
scale_factor <- manual_scale_factor
}
col_x <- scale_factor*(as.numeric(tracking_x))
col_y <- scale_factor*(as.numeric(tracking_y))
col_y <- max(col_y) - col_y
col_savgol_x <- pracma::savgol(as.numeric(col_x), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_x[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_x[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_x[(length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_x)] <- col_savgol_x[length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_savgol_y <- pracma::savgol(as.numeric(col_y), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_y[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_y[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_y[(length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_y)] <- col_savgol_y[length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_median_x <- as.numeric(runmed(as.numeric(col_x), k = median_window_length, endrule = c("keep")))
col_median_y <- as.numeric(runmed(as.numeric(col_y), k = median_window_length, endrule = c("keep")))
col_average_x <- data.table::frollmean(as.numeric(col_x), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
col_average_y <- data.table::frollmean(as.numeric(col_y), n = average_window_length, algo = "exact", align = "center") # experimental, beware of NAs
sample_tracking <- data.frame(csv$scorer, col_x, col_y,
col_savgol_x, col_savgol_y,
col_median_x, col_median_y,
col_average_x, col_average_y,
conf)
View(sample_tracking)
raw_features <- extract_features(x = sample_tracking$col_x, y = sample_tracking$col_y,
parameters = params, diagnostics = TRUE)
plot(raw_features)
as.numeric(na.omit(sample_tracking$col_savgol_x))
meh <- as.numeric(na.omit(sample_tracking$col_savgol_x))
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_CB_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 1, y_threshold = 0.1)
savgol_features <- extract_features(y = as.numeric(na.omit(sample_tracking$col_savgol_y)), x = as.numeric(na.omit(sample_tracking$col_savgol_x)),
parameters = params, diagnostics = TRUE)
plot(savgol_features)
savgol_features <- extract_features(x = list(as.numeric(na.omit(sample_tracking$col_savgol_x)), as.numeric(na.omit(sample_tracking$col_savgol_y))),
parameters = params, diagnostics = TRUE)
list(as.numeric(na.omit(sample_tracking$col_savgol_x)), as.numeric(na.omit(sample_tracking$col_savgol_y))
)
list(as.numeric(sample_tracking$col_savgol_x), as.numeric(sample_tracking$col_savgol_y))
savgol_features <- extract_features(x = list(as.numeric(sample_tracking$col_savgol_x), as.numeric(sample_tracking$col_savgol_y)),
parameters = params, diagnostics = TRUE)
col_x <- scale_factor*(as.numeric(tracking_x))
col_y <- scale_factor*(as.numeric(tracking_y))
col_y <- max(col_y) - col_y
col_savgol_x <- pracma::savgol(as.numeric(col_x), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_x[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_x[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_x[(length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_x)] <- col_savgol_x[length(col_savgol_x) - savgol_window_length*savgol_filter_smoothing_multiplier]
col_savgol_y <- pracma::savgol(as.numeric(col_y), fl = savgol_window_length, forder = 3, dorder = 0)
col_savgol_y[1:(savgol_window_length*savgol_filter_smoothing_multiplier)] <- col_savgol_y[(savgol_window_length*savgol_filter_smoothing_multiplier)]
col_savgol_y[(length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier):length(col_savgol_y)] <- col_savgol_y[length(col_savgol_y) - savgol_window_length*savgol_filter_smoothing_multiplier]
sample_tracking <- data.frame(csv$scorer, col_x, col_y,
col_savgol_x, col_savgol_y,
col_median_x, col_median_y,
col_average_x, col_average_y,
conf)
savgol_features <- extract_features(x = list(as.numeric(sample_tracking$col_savgol_x), as.numeric(sample_tracking$col_savgol_y)),
parameters = params, diagnostics = TRUE)
savgol_features <- extract_features(x = as.numeric(sample_tracking$col_savgol_x), y = as.numeric(sample_tracking$col_savgol_y),
parameters = params, diagnostics = TRUE)
plot(savgol_features)
plot(savgol_features)
savgol_features <- extract_features(x = as.vector(as.numeric(sample_tracking$col_savgol_x)), y = as.numeric(sample_tracking$col_savgol_y),
parameters = params, diagnostics = TRUE)
plot(savgol_features)
x = as.vector(as.numeric(sample_tracking$col_savgol_x))
y = as.vector(as.numeric(sample_tracking$col_savgol_y))
savgol_features <- extract_features(x = x, y = y,
parameters = params, diagnostics = TRUE)
plot(savgol_features)
x = col_x
y = col_y
plot(col_features)
col_features <- extract_features(x = col_x, y = col_y,
parameters = params, diagnostics = TRUE)
plot(col_features)
fixed_baseline = 0.1
y_threshold = 0.1
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0.1, y_threshold = 0.1)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 11,
savgol_filter_smoothing_multiplier = 1,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0.2, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 13,
savgol_filter_smoothing_multiplier = 1,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 13,
savgol_filter_smoothing_multiplier = 1,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
plot_univariate_projection(csv_or_path = "/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/PAWS-Analysis/CSVs/Baseline_LP_6099_R.csv",
manual_scale_factor = NA, p_cutoff = 0, filter = "savitzky-golay",
body_part = "center", reference_distance = 40, fps = 2000, savgol_window_length = 13,
savgol_filter_smoothing_multiplier = 3,
median_window_length = 11, average_window_length = 11,
shake_threshold = 0.35, window_threshold = 0.5,
fixed_baseline = 0, y_threshold = 0)
params
raw_features <- extract_features(x = sample_tracking$col_x, y = sample_tracking$col_y,
parameters = set_parameters(
fixed.baseline = list(y = fixed_baseline, threshold = y_threshold),
based.on = params), diagnostics = TRUE)
plot(raw_features)
