filter(body_part == body_part_of_interest) %>%
mutate(assign = case_when(grepl(6095, file) | grepl(6099, file) | grepl(7001, file) | grepl(7002, file) | grepl(7009, file) | grepl(7015, file) | grepl(7016, file) ~ "Naive",
grepl(7018, file) | grepl(7038, file) | grepl(7041, file) | grepl(7042, file) | grepl(7021, file) | grepl(7023, file) | grepl(7030, file) | grepl(7031, file) ~ "Context",
grepl(7032, file) | grepl(7043, file) | grepl(7044, file) | grepl(7045, file) | grepl(7053, file) | grepl(7059, file) | grepl(7065, file) | grepl(7071, file) | grepl(7072, file) | grepl(7074, file) ~ "Shock"))
raw$stimulus <- factor(tolower(raw$stimulus), levels = c("cb", "db", "lp", "hp"))
raw$stimulus <- recode(raw$stimulus, cb = "Cotton swab", db = "Dynamic brush",
lp = "Light pinprick", hp = "Heavy pinprick")
raw$group <- factor(raw$group, levels = c("Baseline", "D+4", "D+11"))
raw$assign <- factor(raw$assign, levels = c("Naive", "Context", "Shock"))
raw$body_part <- factor(raw$body_part, levels = c("heel", "center", "toe"))
group.colors <- c(Naive = "lavender", Context = "#F0B0FF", `Shock` = "purple")
raw <- raw[,c(1,18,2:17)]
raw <- arrange(raw, group, stimulus, assign, body_part)
#write.csv(raw, file = "V:/Simon_Ogundare/LH x CP/PAWS Exports/PAWS_results.csv")
library(tidyverse)
library(PAWS)
#raw <- read.csv("E:/LH x CP Experiments/Experiment 1 Data (LH)/LH (PAWS)/PAWS-Analysis/results2/PAWS_Results.csv")
raw <- read.csv("/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/LH (PAWS)/PAWS-Analysis/results_7_30_23/PAWS_Results.csv")
body_part_of_interest <- "center"
raw <- raw %>%
rowwise() %>%
filter(body_part == body_part_of_interest) %>%
mutate(assign = case_when(grepl(6095, file) | grepl(6099, file) | grepl(7001, file) | grepl(7002, file) | grepl(7009, file) | grepl(7015, file) | grepl(7016, file) ~ "Naive",
grepl(7018, file) | grepl(7038, file) | grepl(7041, file) | grepl(7042, file) | grepl(7021, file) | grepl(7023, file) | grepl(7030, file) | grepl(7031, file) ~ "Context",
grepl(7032, file) | grepl(7043, file) | grepl(7044, file) | grepl(7045, file) | grepl(7053, file) | grepl(7059, file) | grepl(7065, file) | grepl(7071, file) | grepl(7072, file) | grepl(7074, file) ~ "Shock"))
raw$stimulus <- factor(tolower(raw$stimulus), levels = c("cb", "db", "lp", "hp"))
raw$stimulus <- recode(raw$stimulus, cb = "Cotton swab", db = "Dynamic brush",
lp = "Light pinprick", hp = "Heavy pinprick")
raw$group <- factor(raw$group, levels = c("Baseline", "D+4", "D+11"))
raw$assign <- factor(raw$assign, levels = c("Naive", "Context", "Shock"))
raw$body_part <- factor(raw$body_part, levels = c("heel", "center", "toe"))
group.colors <- c(Naive = "lavender", Context = "#F0B0FF", `Shock` = "purple")
raw <- raw[,c(1,18,2:17)]
raw <- arrange(raw, group, stimulus, assign, body_part)
#write.csv(raw, file = "V:/Simon_Ogundare/LH x CP/PAWS Exports/PAWS_results.csv")
View(raw)
process <- raw %>%
group_by(group, assign, stimulus, body_part) %>%
summarize(mean = mean(post.pain_score),
sem = sd(post.pain_score)/sqrt(n()),
n = n())
ggplot(process, mapping = aes(x = group, y = mean, fill = assign)) +
geom_col(color = "black", position = position_dodge()) +
geom_errorbar(aes(ymax = mean+sem, ymin = mean-sem), color = "black", width = 0.4,  position = position_dodge(0.9)) +
geom_jitter(raw, mapping = aes(x = group, y = post.pain_score), position = position_dodge(0.9)) +
facet_grid( ~ stimulus) +
geom_hline(aes(yintercept = 0)) +
labs(x = "Stimulus",
y = "Post-Peak Pain score",
fill = "Group") +
scale_fill_manual(values = group.colors) +
theme_classic()
View(process)
View(process)
View(process)
install.packages("gtools")
library(gtools)
process %>%
filter(group = "D+4")
process %>%
filter(group == "D+4")
View(process)
d11 <- process %>%
filter(group == "D+11")
d4 <- process %>%
filter(group == "D+4")
bsl <- process %>%
filter(group == "Baseline")
foldchange(d4$mean, bsl$mean)
d4$foldchange <- foldchange(d4$mean, bsl$mean)
d11$foldchange <- foldchange(d11$mean, bsl$mean)
View(d4)
ggplot(d4, mapping = aes(x = group, y = foldchange, fill = assign)) +
geom_col(color = "black", position = position_dodge()) +
facet_grid( ~ stimulus) +
geom_hline(aes(yintercept = 0)) +
labs(x = "Stimulus",
y = "Post-Peak Pain score",
fill = "Group") +
scale_fill_manual(values = group.colors) +
theme_classic()
library(rhdf5)
h5 <- H5open("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
h5 <- H5open("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
h5 <- H5fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
h5
h5$node_names
h5$node_names[length(h5$node_names) + 1]
h5$node_names[length(h5$node_names) + 1] <- "toe_peak"
h5
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
h5closeAll()
rm(h5)
h5closeAll()
node_names <- c(node_names, "toe_peak")
node_names
View(point_scores)
length(point_scores)
length(point_scores[1])
length(point_scores[2])
length(point_scores[,1,1])
length(point_scores[1,,1])
point_scores[1:length(point_scores[,1,1]), length(point_scores[1,,1]) + 1, 1]
point_scores[1:length(point_scores[,1,1]), length(point_scores[1,,1]) + 1, 1] <- 1
rbind(point_scores, 1)
c <- rbind(point_scores, 1)
c <- rbind(point_scores[,6,1], 1)
c <- rbind(point_scores[,5,1], 1)
c <-  point_scores
c[,6,1]
c[,5,1]
c[,5,1]
c[,,1]
cbind(c[,,1], 1)
c <-  point_scores
c[,,1] <- cbind(c[,,1], 1)
c[,6,1] <- cbind(c[,6,1], 1)
c <-  point_scores
cbind(c[,,1], 1)
c[,6,1] <- cbind(c[,6,1], 1)
c <- cbind(c[,6,1], 1)
c <- cbind(c[,,1], 1)
tracks
c <- tracks
c[1:1933, 6, 1, 1]
c[1:1933, 6, 1, 1] <- 1
toemax <- max(tracks[,1,1,1])
toemax <- max(tracks[,1,1,1], na.rm = TRUE)
toemax_y <- max(tracks[,1,2,1], na.rm = TRUE)
rm(toemax)
toemax_x <- max(tracks[,1,1,1], na.rm = TRUE)
toemax_y <- max(tracks[,1,2,1], na.rm = TRUE)
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
rm(h5)
h5closeAll()
node_names <- c(node_names, "toe_peak")
point_scores <- cbind(point_scores[,,], 1) # double-check that redundant reduction of dimensionality doesn't screw up b-soid
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
rm(h5)
h5closeAll()
node_names <- c(node_names, "toe_peak")
point_scores <- cbind(point_scores[,,,], 1) # double-check that redundant reduction of dimensionality doesn't screw up b-soid
point_scores <- cbind(point_scores[,,], 1) # double-check that redundant reduction of dimensionality doesn't screw up b-soid
cbind(tracks[,,1,1], toemax_x)
tracks[,,1,1] <-  cbind(tracks[,,1,1], toemax_x)
a <- cbind(tracks[,,1,1], toemax_x)
b <- cbind(tracks[,,2,1], toemax_y)
trks <- c(a, b)
trks <- array(c(a, b), dim = c(1933, 6, 2, 1))
trks
tracks <- array(c(cbind(tracks[,,1,1], toemax_x),
cbind(tracks[,,2,1], toemax_y)),
dim = c(1933, 6, 2, 1))
length(tracks[,1,1,1])
length(node_names)
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
rm(h5)
h5closeAll()
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
rm(h5)
h5closeAll()
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1], length(node_names), 1)))
library(rhdf5)
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
rm(h5)
h5closeAll()
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
toemax_x <- max(tracks[,1,1,1], na.rm = TRUE)
toemax_y <- max(tracks[,1,2,1], na.rm = TRUE)
tracks <- array(c(cbind(tracks[,,1,1], toemax_x),
cbind(tracks[,,2,1], toemax_y)),
dim = c(length(tracks[,1,1,1]), length(node_names), 2, 1))
h5write(node_names, "/node_names", "/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
h5closeAll()
h5write(node_names, "/node_names", "/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
library(rhdf5)
h5 <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5")
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
toemax_x <- max(tracks[,1,1,1], na.rm = TRUE)
toemax_y <- max(tracks[,1,2,1], na.rm = TRUE)
tracks <- array(c(cbind(tracks[,,1,1], toemax_x),
cbind(tracks[,,2,1], toemax_y)),
dim = c(length(tracks[,1,1,1]), length(node_names), 2, 1))
h5
filename <- "/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5"
filename <- "/Users/Simon/Desktop/H5s/Baseline_CB_7001_R.h5"
basename(filename)
file.path("/Users/Simon/Desktop", basename(filename))
files <- list.files(read_path, pattern = "*h5")
read_path <- "/Users/Simon/Desktop/H5s"
save_path <- "/Users/Simon/Desktop/modified_H5s"
files <- list.files(read_path, pattern = "*h5")
files <- list.files(read_path, pattern = "*h5", full.names = TRUE)
library(rhdf5)
read_path <- "/Users/Simon/Desktop/H5s"
save_path <- "/Users/Simon/Desktop/modified_H5s"
files <- list.files(read_path, pattern = "*h5", full.names = TRUE)
for (filename in files) {
# open h5
h5 <- H5Fopen(filename)
# facets to keep
edge_inds <- h5$edge_inds
edge_names <- h5$edge_names
instance_scores <- h5$instance_scores[, 1]
labels_path <- h5$labels_path
provenance <- h5$provenance
track_names <- h5$track_names[1]
track_occupancy <- h5$track_occupancy[1, ]
tracking_scores <- h5$tracking_scores[, 1]
video_ind <- h5$video_ind
video_path <- h5$video_path
# facets to modify
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
# close out h5 (for safeties)
rm(h5)
h5closeAll()
# modify facets
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
tracks <- array(c(cbind(tracks[,,1,1], max(tracks[,1,1,1], na.rm = TRUE)),
cbind(tracks[,,2,1], tracks[,1,2,1], na.rm = TRUE)),
dim = c(length(tracks[,1,1,1]), length(node_names), 2, 1))
# rewrite a new h5 de novo using modified facets
h5save(
edge_inds,
edge_names,
instance_scores,
labels_path,
node_names,
point_scores,
provenance,
track_names,
track_occupancy,
tracking_scores,
tracks,
video_ind,
video_path,
file = paste0(file.path(save_path, basename(filename)))
}
library(rhdf5)
read_path <- "/Users/Simon/Desktop/H5s"
save_path <- "/Users/Simon/Desktop/modified_H5s"
files <- list.files(read_path, pattern = "*h5", full.names = TRUE)
for (filename in files) {
# open h5
h5 <- H5Fopen(filename)
# facets to keep
edge_inds <- h5$edge_inds
edge_names <- h5$edge_names
instance_scores <- h5$instance_scores[, 1]
labels_path <- h5$labels_path
provenance <- h5$provenance
track_names <- h5$track_names[1]
track_occupancy <- h5$track_occupancy[1, ]
tracking_scores <- h5$tracking_scores[, 1]
video_ind <- h5$video_ind
video_path <- h5$video_path
# facets to modify
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
# close out h5 (for safeties)
rm(h5)
h5closeAll()
# modify facets
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
tracks <- array(c(cbind(tracks[,,1,1], max(tracks[,1,1,1], na.rm = TRUE)),
cbind(tracks[,,2,1], tracks[,1,2,1], na.rm = TRUE)),
dim = c(length(tracks[,1,1,1]), length(node_names), 2, 1))
# rewrite a new h5 de novo using modified facets
h5save(
edge_inds,
edge_names,
instance_scores,
labels_path,
node_names,
point_scores,
provenance,
track_names,
track_occupancy,
tracking_scores,
tracks,
video_ind,
video_path,
file = paste0(file.path(save_path, basename(filename))))
}
H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
library(rhdf5)
h5 <- H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
h5
h5$tracks
h5
h5$edge_inds
h5$edge_names
h5or <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_6095_R.h5")
h5
h5or
h5$labels_path
h5or$labels_path
h5or$provenance
h5$provenance
h5or$track_occupancy
h5$track_occupancy
library(rhdf5)
read_path <- "/Users/Simon/Desktop/H5s"
save_path <- "/Users/Simon/Desktop/modified_H5s"
files <- list.files(read_path, pattern = "*h5", full.names = TRUE)
for (filename in files) {
# open h5
h5 <- H5Fopen(filename)
# facets to keep
edge_inds <- h5$edge_inds
edge_names <- h5$edge_names
instance_scores <- h5$instance_scores
labels_path <- h5$labels_path
provenance <- h5$provenance
track_names <- h5$track_names
track_occupancy <- h5$track_occupancy
tracking_scores <- h5$tracking_scores
video_ind <- h5$video_ind
video_path <- h5$video_path
# facets to modify
node_names <- h5$node_names
point_scores <- h5$point_scores
tracks <- h5$tracks
# close out h5 (for safeties)
rm(h5)
h5closeAll()
# modify facets
node_names <- c(node_names, "toe_peak")
point_scores <- array(cbind(point_scores[,,], 1),
dim = c(length(point_scores[,1,1]), length(node_names), 1))
tracks <- array(c(cbind(tracks[,,1,1], max(tracks[,1,1,1], na.rm = TRUE)),
cbind(tracks[,,2,1], tracks[,1,2,1], na.rm = TRUE)),
dim = c(length(tracks[,1,1,1]), length(node_names), 2, 1))
# rewrite a new h5 de novo using modified facets
h5save(
edge_inds,
edge_names,
instance_scores,
labels_path,
node_names,
point_scores,
provenance,
track_names,
track_occupancy,
tracking_scores,
tracks,
video_ind,
video_path,
file = paste0(file.path(save_path, basename(filename))))
}
library(rhdf5)
h5 <- H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
h5or <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_6095_R.h5")
h5
h5or
h5
h5o <- H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
library(rhdf5)
h5o <- H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
h5n <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_6095_R.h5")
h5o
h5n
h5n <- H5Fopen("/Users/Simon/Desktop/modified_H5s/Baseline_CB_6095_R.h5")
h5o <- H5Fopen("/Users/Simon/Desktop/H5s/Baseline_CB_6095_R.h5")
h5o
h5n
h5o$video_ind
h5n$video_ind
View(tracks)
View(h5o$tracks)
View(h5o$tracks[,,1,1])
h5o$track_names
h5n$track_names
h5n$labels_path
h5n$instance_scores
h5o$instance_scores
h5o
library(PAWS)
h5_to_csv("/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/LH (PAWS)/B-SOID-Analysis/Experiment Groups/Shock_Baseline_HP")
typeof((h5n$tracks[,5,1,1]))
typeof((h5o$tracks[,5,1,1]))
h5_to_csv("/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/LH (PAWS)/B-SOID-Analysis/Experiment Groups/Shock_D+4_HP")
h5_to_csv("/Volumes/Simon_D2/LH x CP Experiments/Experiment 1 Data (LH)/LH (PAWS)/B-SOID-Analysis/Experiment Groups/Shock_D+11_HP")
#' Batch convert SLEAP H5 files into DeepLabCut-like CSVs
#'
#' This function loads a directory containing H5 files generated from SLEAP.
#' It processes the first track in the CSV (assuming single-animal) and rearranges
#' the tracked points to match the style of that in DeepLabCut. Generated CSVs
#' are all saved to a separate directory, but can be saved in the H5 directory if
#' no `save_folder` parameter is assigned.
#'
#' @param h5_folder Path to the folder containing SLEAP H5s.
#' @param save_folder Path to the folder where DeepLabCut-like CSVs will be saved.
#' @return Converted CSVs stored in the `save_folder` directory.
#' @import rhdf5
#' @export
h5_to_csv <- function(h5_folder, save_folder = NA) {
if (is.na(save_folder)) {
save_folder <- h5_folder
}
files <- list.files(path = h5_folder, pattern = "*.h5", full.names = TRUE)
file_names <- list.files(path = h5_folder, pattern = "*.h5", full.names = FALSE)
j = 1
for (file in files) {
h5f = H5Fopen(file)
body_parts <- h5f$node_names
tracks <- list()
for (body_part in 1:length(body_parts)) {
tracks <- append(tracks, list(list(x = list(NA), y = list(NA), likelihood = list(NA))))
}
names(tracks) <- body_parts
i = 1
for (body_part in body_parts) {
tracks[[body_part]][['x']] <- h5f$tracks[,i,1,1]
tracks[[body_part]][['y']] <- h5f$tracks[,i,2,1]
tracks[[body_part]][['likelihood']] <- h5f$point_scores[,i,1]
i = i + 1
}
for (body_part in body_parts) {
tracks[[body_part]][['likelihood']][which(is.nan(tracks[[body_part]][['likelihood']]))] <- 1
tracks[[body_part]][['x']][which(is.nan(tracks[[body_part]][['x']]))] <- NA
tracks[[body_part]][['y']][which(is.nan(tracks[[body_part]][['y']]))] <- NA
}
df <- data.frame(scorer = c("bodyparts", "coords", 1:length(tracks[[1]][['x']])))
for (body_part in body_parts) {
x_data <- c(body_part, "x", tracks[[body_part]][['x']])
y_data <- c(body_part, "y", tracks[[body_part]][['y']])
p_data <- c(body_part, "likelihood", tracks[[body_part]][['likelihood']])
df <- cbind(df, x_data, y_data, p_data)
}
header <- c("index")
for (body_part in body_parts) {
header <- c(header, paste0(body_part, "_x"), paste0(body_part, "_y"), paste0(body_part, "_p"))
}
names(df) <- header
write.csv(df, row.names = FALSE, file = paste0(save_folder, "/", substr(file_names[j], 1, nchar(file_names[j])-3), ".csv"))
j = j + 1
}
}
h5_to_csv("/Users/Simon/Desktop/h5s")
library(PAWS)
h5_to_csv("/Users/Simon/Desktop/h5s")
rm(h5_to_csv)
h5_to_csv("/Users/Simon/Desktop/h5s")
h5_to_csv("/Users/Simon/Desktop/reh5s", "/Users/Simon/Desktop/sjl csvs")
h5_to_csv("/Users/Simon/Desktop/reh5s", "/Users/Simon/Desktop/sjl (2/2)")
h5_to_csv("/Users/Simon/Desktop/reh5s", "/Users/Simon/Desktop/sjl (2/2)")
h5_to_csv("/Users/Simon/Desktop/reh5s", "/Users/Simon/Desktop/sjl csvs 2")
library(rhdf5)
# h5 path without / at very end
#h5_path <- readClipboard()
h5_path <- "/Users/Simon/Desktop/H5s"
files <- list.files(h5_path, pattern = "*.h5")
full_paths <- list.files(h5_path, pattern = "*h5", full.names = TRUE)
split <- strsplit(files, split = "_")
for (file_to_split in 1:length(files)) {
file.rename(full_paths[file_to_split],
paste0(h5_path, paste0("/", split[[file_to_split]][2], "_", split[[file_to_split]][3], "_", split[[file_to_split]][4], "_", substr(split[[file_to_split]][5], 1, 1), ".h5")))
}
PAWS::h5_to_csv(h5_folder = h5_path, save_folder = "/Users/Simon/Desktop/CSVs")
library(PAWS)
paws_dashboard()
install.packages("pawscore")
library(pawscore)
library(devtools)
load_all()
roxygen2::roxygenize()
load_all()
roxygen2::roxygenize()
paws_dashboard()
paws_dashboard()
pawscore::default_parameters()
pawscore::set_parameters()
names(parameters)
params <- set_parameters('fixed_baseline' = 3)
params
