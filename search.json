[{"path":[]},{"path":"https://osimon81.github.io/PAWS/articles/Introduction.html","id":"loading-sample-data","dir":"Articles","previous_headings":"Pre-processing data","what":"Loading sample data","title":"Introduction","text":"’re going load two example CSVs. CSVs created using custom script (see h5_to_csv() function ’d like use ) processes H5s exported SLEAP CSVs can run PAWS:","code":"lp_manual_stim <- system.file(\"extdata\", \"Example_6J_female_lp_manual.csv\", package = \"PAWS\") lp_arm_stim <- system.file(\"extdata\", \"Example_6J_female_lp_arm.csv\", package = \"PAWS\")"},{"path":"https://osimon81.github.io/PAWS/articles/Introduction.html","id":"plotting-sample-data","dir":"Articles","previous_headings":"Pre-processing data","what":"Plotting sample data","title":"Introduction","text":"can plot trajectories paw withdrawal determine whether tracking appropriate using variety customizable parameters:  Notice transparency data point reflects tracking confidence, qualitative way assessing outliers. ’ll take apart different settings plot_filter_graphs() function , describe can optimize settings design optimal filter data. csv_or_path variable refers path CSV wish track. , ’re looking trajectory manual stimulation sample dataset. p_cutoff variable refers confidence level want replace data interpolation. words, might want replace outlier points mistracked interpolation confident points. Setting p_cutoff 0.1 replaces points model <10% confident interpolation. reference_distance variable refers real-world distance two reference points. points example CSV top bottom chamber (measured 40mm), value set 40. distance used adaptively calculate scale factor video scale data appropriately, regardless whether camera used different distances different videos. manual_scale_factor variable can used don’t wish use reference objects adaptively calculate scale factors. usually case certain camera always distance away target, can enter millimeter/pixel scale factor used every single one videos. Keep mind setting manual_scale_factor override reference_distance adaptive calculations — code use manual_scale_factor scale videos scale millimeters. fps variable can used set number frames per second video set timescale behavior. , use 2000 fps. 6-8) savgol_window_length, median_window_length, average_window_length variables define degree smoothing (using either Savitzky-Golay filter, rolling median filter, rolling average filter) wish apply trajectory data. default, values set 25, can increase decrease window data-points filter use apply smoothing. Generally, higher window length results increased smoothing, sure applying high level smoothing, suppressing subtle behaviors. 9-10) body_part, indicate whether wish show trajectories “toe,” “center,” “heel.” axis, indicate whether wish show trajectories given body part using “x” axis “y” axis. Next, ’ll look can alter parameters optimize levels smoothing. following code chunk plots trajectories mouse ARM group:  complicated trajectories (one ’re seeing example ARM CSV), certain smoothing filters tend work better others. ’ve found rolling average filter (figure D ) tends robust. subplot, see smooth trajectory (using filter windows 11), notice slightly reduces maximum peak filter. Setting higher filter window dampen peaks even , using function helpful pre-processing step optimize smoothing given video. Finally, ’ll also increase p-cutoff 0 80% see data changes:  generally want pick p-cutoff based confidence model’s tracking. , ’ve picked p-cutoff 0.8 (.e. every point model 80% confident less replaced interpolation). ’ll able qualitatively visualize tracked points confidence less p-cutoff threshold instead interpolated points threshold. shown , can use function determine balance smoothing levels, filter chosen smoothing, p-cutoff produce clean trajectories without suppressing subtle behaviors.","code":"plot_filter_graphs(csv_or_path = lp_manual_stim,                    p_cutoff = 0,                    reference_distance = 40,                    manual_scale_factor = NA,                    fps = 2000,                    savgol_window_length = 25,                    median_window_length = 25,                    average_window_length = 25,                    body_part = \"center\",                    axis = \"y\") #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo #> Warning: Removed 24 rows containing missing values (`geom_point()`). plot_filter_graphs(csv_or_path = lp_arm_stim,                    p_cutoff = 0,                    reference_distance = 40,                    manual_scale_factor = NA,                    fps = 2000,                    savgol_window_length = 11,                    median_window_length = 11,                    average_window_length = 11,                    body_part = \"center\",                    axis = \"y\") #> Warning: Removed 10 rows containing missing values (`geom_point()`). plot_filter_graphs(csv_or_path = lp_arm_stim,                    p_cutoff = 0.80,                    reference_distance = 40,                    manual_scale_factor = NA,                    fps = 2000,                    savgol_window_length = 11,                    median_window_length = 11,                    average_window_length = 11,                    body_part = \"center\",                    axis = \"y\") #> Warning: Removed 10 rows containing missing values (`geom_point()`)."},{"path":"https://osimon81.github.io/PAWS/articles/Introduction.html","id":"running-paws-diagnostics","dir":"Articles","previous_headings":"Pre-processing data","what":"Running PAWS diagnostics","title":"Introduction","text":"PAWS runs analysis primarily univariate projection — combination x y components, weighted based much movement particular axis. ’s important graph raw trajectories paw time, also graph univariate projection diagnostic plots built paws. produce plots using settings recent smoothing settings, can run following function:  ’ll notice plots much smoother run diagnostics video, without smoothing data first (shown ):  , can also alter shake_threshold parameter make PAWS algorithm less sensitive detecting shaking behaviors (instance, try changing 0.35 0.10). Finally, one important thresholds set window_threshold, specifies sensitive PAWS examining paw trajectories withdrawal behavior. Setting lower threshold result higher sensitivity, higher threshold result lower sensitivity. videos aren’t scored paw activity window found (especially common innocuous stimuli), try setting lower threshold. running analysis entire dataset, can prospectively see PAWS output video look like running function mini_paws() toe, center, heel body parts CSV:","code":"plot_univariate_projection(csv_or_path = lp_arm_stim,                    p_cutoff = 0.8,                    reference_distance = 40,                    manual_scale_factor = NA,                    filter = \"average\",                    fps = 2000,                    average_window_length = 11,                    body_part = \"center\") plot_univariate_projection(csv_or_path = lp_arm_stim,                    p_cutoff = 0,                    reference_distance = 40,                    manual_scale_factor = NA,                    filter = \"none\",                    fps = 2000,                    body_part = \"center\",                    shake_threshold = 0.35) toe <- mini_paws(   csv_or_path = lp_arm_stim, p_cutoff = 0,   reference_distance = 40, manual_scale_factor = NA,   filter = \"average\", average_window_length = 11,   fps = 2000, body_part = \"toe\" )  center <- mini_paws(   csv_or_path = lp_arm_stim, p_cutoff = 0,   reference_distance = 40, manual_scale_factor = NA,   filter = \"average\", average_window_length = 11,   fps = 2000, body_part = \"center\" )  heel <- mini_paws(   csv_or_path = lp_arm_stim, p_cutoff = 0,   reference_distance = 40, manual_scale_factor = NA,   filter = \"average\", average_window_length = 11,   fps = 2000, body_part = \"heel\" )  lp_arm_manual <- rbind(toe, center, heel) row.names(lp_arm_manual) <- c(\"toe\", \"center\", \"heel\")  lp_arm_manual #>        pre.pain_score post.pain_score pre.max_height pre.max_x_velocity #> toe        -0.2558666       0.4081954       8.111239           1489.410 #> center     -0.3108219       0.1133024       7.414087           1675.167 #> heel       -0.5135491       3.7983165       6.051316           1477.692 #>        pre.max_y_velocity pre.distance_traveled post.max_height #> toe             1134.4717              12.82948       10.733584 #> center          1036.6020              13.41530        8.681941 #> heel             703.6586              11.20344       23.439847 #>        post.max_x_velocity post.max_y_velocity post.distance_traveled #> toe               2483.291            1897.659               78.77853 #> center            2235.985            1603.463               71.48808 #> heel              1648.575            9300.921               98.83561 #>        post.number_of_shakes post.shaking_duration post.guarding_duration #> toe                        4                0.0545                 0.0415 #> center                     4                0.0535                 0.0460 #> heel                       4                0.0255                 0.1555"},{"path":"https://osimon81.github.io/PAWS/articles/Introduction.html","id":"running-paws","dir":"Articles","previous_headings":"","what":"Running PAWS","title":"Introduction","text":"Finally, happy degree smoothing diagnostic plots, ’re ready run PAWS full set CSVs. paws_analysis() function uses many parameters mentioned earlier, show example run using sample dataset: [note: following code throw saving error R Markdown notebook works, can set custom saveDirectory function run !] can also accomplish previous steps analysis using interactive dashboard running following code:","code":"paws_analysis(csvDirectory = \"demo/sample_data\",               saveDirectory = \"enter_save_path_here\",               p_cutoff = 0.8, manual_scale_factor = NA,               filter_chosen = \"average\", filter_length = 11,               reference_distance = 40, stims = \"lp\",               body_parts = c(\"toe\", \"center\", \"heel\"),               reference_points = c(\"objecta\", \"objectb\"),                groups = c(\"arm\", \"manual\"), fps = 2000,               shake_threshold = 0.35) paws_dashboard()"},{"path":"https://osimon81.github.io/PAWS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Ogundare. Author, maintainer.","code":""},{"path":"https://osimon81.github.io/PAWS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ogundare S (2023). PAWS: PAWS (Pain Assessment Withdrawal Speeds). R package version 0.0.0.9000, https://osimon81.github.io/PAWS/.","code":"@Manual{,   title = {PAWS: PAWS (Pain Assessment at Withdrawal Speeds)},   author = {Simon Ogundare},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://osimon81.github.io/PAWS/}, }"},{"path":"https://osimon81.github.io/PAWS/reference/h5_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch convert SLEAP H5 files into DeepLabCut-like CSVs — h5_to_csv","title":"Batch convert SLEAP H5 files into DeepLabCut-like CSVs — h5_to_csv","text":"function loads directory containing H5 files generated SLEAP. processes first track CSV (assuming single-animal) rearranges tracked points match style DeepLabCut. Generated CSVs saved separate directory, can saved H5 directory save_folder parameter assigned.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/h5_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch convert SLEAP H5 files into DeepLabCut-like CSVs — h5_to_csv","text":"","code":"h5_to_csv(h5_folder, save_folder = NA)"},{"path":"https://osimon81.github.io/PAWS/reference/h5_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch convert SLEAP H5 files into DeepLabCut-like CSVs — h5_to_csv","text":"h5_folder Path folder containing SLEAP H5s. save_folder Path folder DeepLabCut-like CSVs saved.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/h5_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch convert SLEAP H5 files into DeepLabCut-like CSVs — h5_to_csv","text":"Converted CSVs stored save_folder directory.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/mini_paws.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PAWS analysis for a single CSV (rather than in batch) — mini_paws","title":"Run PAWS analysis for a single CSV (rather than in batch) — mini_paws","text":"function loads single CSV containing tracking data. function scores tracked data outputs PAWS scores.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/mini_paws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PAWS analysis for a single CSV (rather than in batch) — mini_paws","text":"","code":"mini_paws(   csv_or_path,   manual_scale_factor = NA,   p_cutoff = 0,   filter = \"none\",   body_part = \"center\",   reference_distance,   fps = 2000,   savgol_window_length = 11,   median_window_length = 11,   average_window_length = 11,   shake_threshold = 0.35,   window_threshold = 0.5 )"},{"path":"https://osimon81.github.io/PAWS/reference/mini_paws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PAWS analysis for a single CSV (rather than in batch) — mini_paws","text":"csv_or_path Either csv loaded R object, full path CSV. manual_scale_factor 'real-world-length' pixel conversion factor (.e. millimeters/pixel). using two reference points, can ignore parameter. p_cutoff confidence value tracked points threshold replaced linear interpolation two higher-confidence points. filter filter chosen smooth tracked trajectories. Options \"none\", \"savitzky-golay\", \"median\", \"average\" (average recommended) body_part body_parts wish plot. reference_distance 'real-world-length' reference objects (can mm, cm, etc). indicate manual_scale_factor, setting overrided factor. fps frames per second CSV. savgol_window_length rolling window length Savitzky-Golay filter smoothing apply tracking trajectory. median_window_length rolling window length median filter smoothing apply tracking trajectory. average_window_length rolling window length average filter smoothing apply tracking trajectory. shake_threshold threshold examine given window tracking activity shaking behaviors. Higher values apply conservative shaking threshold (Tip: shake segmentation match see video, can fine-tune threshold match observations). window_threshold threshold examine given window tracking activity withdrawal behavior. Higher values apply conservative window threshold.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/mini_paws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PAWS analysis for a single CSV (rather than in batch) — mini_paws","text":"data frame RStudio containing PAWS scores single file.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/paws_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PAWS analysis on a full set of CSVs in batch — paws_analysis","title":"Run PAWS analysis on a full set of CSVs in batch — paws_analysis","text":"function used run PAWS analysis either custom script dashboard. paws_analysis use custom parameters group tracked data single CSV containing pre- post-peak metrics.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/paws_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PAWS analysis on a full set of CSVs in batch — paws_analysis","text":"","code":"paws_analysis(   csv_directory,   save_directory,   p_cutoff = 0.3,   manual_scale_factor = NA,   filter_chosen = \"average\",   filter_length = 11,   reference_distance = 40,   stims = c(\"cb\", \"db\", \"lp\", \"hp\"),   body_parts = c(\"toe\", \"center\", \"heel\"),   reference_points = c(\"objecta\", \"objectb\"),   groups,   fps = 2000,   window_threshold = 0.5,   shake_threshold = 0.35 )"},{"path":"https://osimon81.github.io/PAWS/reference/paws_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PAWS analysis on a full set of CSVs in batch — paws_analysis","text":"csv_directory Path folder containing individual tracked CSVs. save_directory Path folder PAWS output file saved. p_cutoff confidence value tracked points threshold replaced linear interpolation two higher-confidence points. manual_scale_factor 'real-world-length' pixel conversion factor (.e. millimeters/pixel). using two reference points, can ignore parameter. filter_chosen filter chosen smooth tracked trajectories. Options \"none\", \"savitzky-golay\", \"median\", \"average\" (average recommended) reference_distance 'real-world-length' reference objects (can mm, cm, etc). indicate manual_scale_factor, setting overrided factor. stims word/acronym use indicate stimulation type tracked CSVs. set tracked CSVs dynamic brush light pinprick stimulations (named DB_1.csv LP_2.csv), set stims c(\"DB\", \"LP\"). parameter enables PAWS automatically adaptively group scored data stimulus final output file, . body_parts names body-part(s) wish score using PAWS. label paw body-parts \"toe,\" \"center,\" \"heel,\" set body_parts c(\"toe\", \"center\", \"heel\"). reference_points names two reference points wish use adaptively scale videos appropriate real-world dimensions. choose reference points (instead wish apply manual scale factor every video), can ignore setting. groups names groups wish separate (based filenames CSVs provide). parameter enables PAWS automatically adaptively group scored data experimental group final output file, . fps frames per second set CSVs window_threshold threshold examine given window tracking activity withdrawal behavior. Higher values apply conservative window threshold. shake_threshold threshold examine given window tracking activity shaking behaviors. Higher values apply conservative shaking threshold (Tip: shake segmentation match see video, can fine-tune threshold match observations).","code":""},{"path":"https://osimon81.github.io/PAWS/reference/paws_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PAWS analysis on a full set of CSVs in batch — paws_analysis","text":"single CSV grouped stimulus experimental group, containing PAWS metrics body-part.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/paws_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the PAWS Dashboard — paws_dashboard","title":"Launch the PAWS Dashboard — paws_dashboard","text":"function launches Shiny dashboard running PAWS interactively without code. Settings able specified Dashboard visualizations output many PAWS functions appear corresponding tabs , .","code":""},{"path":"https://osimon81.github.io/PAWS/reference/paws_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the PAWS Dashboard — paws_dashboard","text":"","code":"paws_dashboard()"},{"path":"https://osimon81.github.io/PAWS/reference/paws_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch the PAWS Dashboard — paws_dashboard","text":"PAWS dashboard.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_filter_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a given trajectory under all available filters — plot_filter_graphs","title":"Plot a given trajectory under all available filters — plot_filter_graphs","text":"function loads CSV containing tracking data. Given particular body-part, axis, level smoothing, function plots trajectory body-part along axis.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_filter_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a given trajectory under all available filters — plot_filter_graphs","text":"","code":"plot_filter_graphs(   csv_or_path,   p_cutoff,   reference_distance = NA,   manual_scale_factor = NA,   fps = 2000,   savgol_window_length = 25,   median_window_length = 25,   average_window_length = 25,   body_part = \"center\",   axis = \"y\" )"},{"path":"https://osimon81.github.io/PAWS/reference/plot_filter_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a given trajectory under all available filters — plot_filter_graphs","text":"csv_or_path Either csv loaded R object, full path CSV. p_cutoff confidence value tracked points threshold replaced linear interpolation two higher-confidence points. reference_distance 'real-world-length' reference objects (can mm, cm, etc). indicate manual_scale_factor, setting overrided factor. manual_scale_factor 'real-world-length' pixel conversion factor (.e. millimeters/pixel). using two reference points, can ignore parameter. fps frames per second CSV. savgol_window_length rolling window length Savitzky-Golay filter smoothing apply tracking trajectory. median_window_length rolling window length median filter smoothing apply tracking trajectory. average_window_length rolling window length average filter smoothing apply tracking trajectory. body_part body_part wish plot. axis axis wish plot.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_filter_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a given trajectory under all available filters — plot_filter_graphs","text":"figure panels (indicating plotted track given filter level smoothing).","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_pain_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot pain score distributions — plot_pain_scores","title":"Plot pain score distributions — plot_pain_scores","text":"function plots distribution pain scores, either pre-peak post-peak.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_pain_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot pain score distributions — plot_pain_scores","text":"","code":"plot_pain_scores(csv_path, peak = \"pre\")"},{"path":"https://osimon81.github.io/PAWS/reference/plot_pain_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot pain score distributions — plot_pain_scores","text":"csv_path path aggregated CSV exported paws_analysis function peak Whether plot pre-peak (pre) post-peak (post) pain scores.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_pain_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot pain score distributions — plot_pain_scores","text":"density plot pain score distributions.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_paws_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PAWS features — plot_paws_features","title":"Plot PAWS features — plot_paws_features","text":"function plots given PAWS feature across stimuli, groups, body-parts.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_paws_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PAWS features — plot_paws_features","text":"","code":"plot_paws_features(csv_path, plot_features)"},{"path":"https://osimon81.github.io/PAWS/reference/plot_paws_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PAWS features — plot_paws_features","text":"csv_path path aggregated CSV exported paws_analysis function plot_features PAWS feature plot. Options pre-peak max height, pre-peak max x-velocity, pre-peak max y-velocity, pre-peak distance traveled, post-peak max height, post-peak max x-velocity, post-peak max y-velocity, post-peak distance traveled, post-peak number shakes, post-peak shaking duration, post-peak guarding duration","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_paws_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PAWS features — plot_paws_features","text":"bar plot PAWS features distribution.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_univariate_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a univariate projection under a given filter — plot_univariate_projection","title":"Plot a univariate projection under a given filter — plot_univariate_projection","text":"function loads CSV containing tracking data. Given particular body-part, smoothing filter, level smoothing, function plots univariate trajectory body-part along axis.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_univariate_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a univariate projection under a given filter — plot_univariate_projection","text":"","code":"plot_univariate_projection(   csv_or_path,   manual_scale_factor = NA,   p_cutoff = 0,   filter = \"none\",   body_part = \"center\",   reference_distance,   fps = 2000,   savgol_window_length = 11,   median_window_length = 11,   average_window_length = 11,   shake_threshold = 0.35,   window_threshold = 0.5 )"},{"path":"https://osimon81.github.io/PAWS/reference/plot_univariate_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a univariate projection under a given filter — plot_univariate_projection","text":"csv_or_path Either csv loaded R object, full path CSV. manual_scale_factor 'real-world-length' pixel conversion factor (.e. millimeters/pixel). using two reference points, can ignore parameter. p_cutoff confidence value tracked points threshold replaced linear interpolation two higher-confidence points. filter filter chosen smooth tracked trajectories. Options \"none\", \"savitzky-golay\", \"median\", \"average\" (average recommended) body_part body_part wish plot. reference_distance 'real-world-length' reference objects (can mm, cm, etc). indicate manual_scale_factor, setting overrided factor. fps frames per second CSV. savgol_window_length rolling window length Savitzky-Golay filter smoothing apply tracking trajectory. median_window_length rolling window length median filter smoothing apply tracking trajectory. average_window_length rolling window length average filter smoothing apply tracking trajectory.","code":""},{"path":"https://osimon81.github.io/PAWS/reference/plot_univariate_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a univariate projection under a given filter — plot_univariate_projection","text":"figure diagnostic panels (indicating unannotated annotated univariate projections, estimated horizontal vertical positions velocities).","code":""}]
